package thread;

public class TestDeadLock implements Runnable {

	static Object o1 = new Object();
	static Object o2 = new Object();
	public static int flag = 0;

	public static void main(String[] args) {
		

		TestDeadLock deadLock1 = new TestDeadLock();
		TestDeadLock deadLock2 = new TestDeadLock();
		Thread t1 = new Thread(deadLock1);
		Thread t2 = new Thread(deadLock2);
		deadLock1.flag = 0;
		deadLock2.flag = 1;
		t1.start();
		t2.start();
		
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		System.out.println(flag);
		if (flag == 0) {
			synchronized (o1) {// 指的是锁住o1对象
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				synchronized (o2) {
					System.out.println("线程1执行完毕");
				}
			}

		}
		if (flag == 1) {
			synchronized (o2) {// 指的是锁住o2对象
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				synchronized (o1) {
					System.out.println("线程2执行完毕");
				}
			}

		}
	}

}
